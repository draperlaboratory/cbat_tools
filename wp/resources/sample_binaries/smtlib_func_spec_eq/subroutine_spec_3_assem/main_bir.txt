00000874: program
00000856: sub __assert_fail(__assert_fail_result)
00000875: __assert_fail_result :: out u32 = RAX

0000048f:
00000494: RAX := 0x3C
0000049c: RDI := 3
000004ab: #52 := mem[RSP, el]:u64
000004ae: RSP := RSP + 8
000004b1: call #52 with noreturn

00000857: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000876: __do_global_dtors_aux_result :: out u32 = RAX

0000038f:
0000039a: #43 := mem[0x601030]
0000039d: CF := mem[0x601030] < 0
000003a0: OF := high:1[mem[0x601030] & (mem[0x601030] ^ #43)]
000003a3: AF := 0x10 = (0x10 & (#43 ^ mem[0x601030]))
000003a6: PF :=
          ~low:1[let $1 = #43 >> 4 ^ #43 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000003a9: SF := high:1[#43]
000003ac: ZF := 0 = #43
000003b7: when ~ZF goto %000003b1
00000858: goto %0000075e

0000075e:
00000765: #82 := RBP
00000768: RSP := RSP - 8
0000076b: mem := mem with [RSP, el]:u64 <- #82
00000773: RBP := RSP
0000077d: RSP := RSP - 8
00000780: mem := mem with [RSP, el]:u64 <- 0x4004D2
00000783: call @deregister_tm_clones with return %00000786

00000786:
0000078c: RBP := mem[RSP, el]:u64
0000078f: RSP := RSP + 8
00000797: mem := mem with [0x601030] <- 1
00000859: goto %000003b1

000003b1:
000003c4: #45 := mem[RSP, el]:u64
000003c7: RSP := RSP + 8
000003ca: call #45 with noreturn

0000085a: sub __gmon_start__(__gmon_start___result)
00000877: __gmon_start___result :: out u32 = RAX

00000130:
0000084d: call @__gmon_start__@external with noreturn

0000085b: sub __libc_csu_fini(__libc_csu_fini_result)
00000878: __libc_csu_fini_result :: out u32 = RAX

000006aa:
000006b1: #75 := mem[RSP, el]:u64
000006b4: RSP := RSP + 8
000006b7: call #75 with noreturn

0000085c: sub __libc_csu_init(__libc_csu_init_result)
00000879: __libc_csu_init_result :: out u32 = RAX

000004ef:
000004f6: #55 := R15
000004f9: RSP := RSP - 8
000004fc: mem := mem with [RSP, el]:u64 <- #55
00000506: #56 := R14
00000509: RSP := RSP - 8
0000050c: mem := mem with [RSP, el]:u64 <- #56
00000514: R15 := pad:64[low:32[RDI]]
0000051e: #57 := R13
00000521: RSP := RSP - 8
00000524: mem := mem with [RSP, el]:u64 <- #57
0000052e: #58 := R12
00000531: RSP := RSP - 8
00000534: mem := mem with [RSP, el]:u64 <- #58
0000053c: R12 := 0x600E10
00000546: #59 := RBP
00000549: RSP := RSP - 8
0000054c: mem := mem with [RSP, el]:u64 <- #59
00000554: RBP := 0x600E18
0000055e: #60 := RBX
00000561: RSP := RSP - 8
00000564: mem := mem with [RSP, el]:u64 <- #60
0000056c: R14 := RSI
00000574: R13 := RDX
00000584: #61 := RBP
00000587: #62 := R12
0000058a: RBP := RBP - R12
0000058d: CF := #61 < #62
00000590: OF := high:1[(#61 ^ #62) & (#61 ^ RBP)]
00000593: AF := 0x10 = (0x10 & (RBP ^ #61 ^ #62))
00000596: PF :=
          ~low:1[let $1 = RBP >> 4 ^ RBP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000599: SF := high:1[RBP]
0000059c: ZF := 0 = RBP
000005ab: #64 := RSP
000005ae: RSP := RSP - 8
000005b1: CF := #64 < 8
000005b4: OF := high:1[(#64 ^ 8) & (#64 ^ RSP)]
000005b7: AF := 0x10 = (0x10 & (RSP ^ #64 ^ 8))
000005ba: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000005bd: SF := high:1[RSP]
000005c0: ZF := 0 = RSP
000005cf: #67 := RBP
000005d2: RBP := RBP ~>> 3
000005d5: CF := high:1[#67 << 0x3D]
000005d8: SF := high:1[RBP]
000005db: ZF := 0 = RBP
000005de: PF :=
          ~low:1[let $1 = RBP >> 4 ^ RBP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000005e1: AF := unknown[bits]:u1
000005e4: OF := unknown[bits]:u1
000005ee: RSP := RSP - 8
000005f1: mem := mem with [RSP, el]:u64 <- 0x400561
000005f4: call @_init with return %000005f7

000005f7:
00000602: #69 := RBP
00000605: OF := 0
00000608: CF := 0
0000060b: AF := unknown[bits]:u1
0000060e: PF :=
          ~low:1[let $1 = #69 >> 4 ^ #69 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000611: SF := high:1[#69]
00000614: ZF := 0 = #69
0000061f: when ZF goto %00000619
0000085d: goto %000006bb

000006bb:
000006c6: RBX := 0
000006c9: AF := unknown[bits]:u1
000006cc: ZF := 1
000006cf: PF := 1
000006d2: OF := 0
000006d5: CF := 0
000006d8: SF := 0
0000085e: goto %000006df

000006df:
000006e4: RDX := R13
000006ec: RSI := R14
000006f4: RDI := pad:64[low:32[R15]]
000006ff: #76 := mem[R12 + (RBX << 3), el]:u64
00000702: RSP := RSP - 8
00000705: mem := mem with [RSP, el]:u64 <- 0x40057D
00000708: call #76 with return %0000070c

0000070c:
00000718: #77 := RBX
0000071b: RBX := RBX + 1
0000071e: CF := RBX < #77
00000721: OF := ~high:1[#77] & (high:1[#77] | high:1[RBX]) &
          ~(high:1[#77] & high:1[RBX])
00000724: AF := 0x10 = (0x10 & (RBX ^ #77 ^ 1))
00000727: PF :=
          ~low:1[let $1 = RBX >> 4 ^ RBX in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000072a: SF := high:1[RBX]
0000072d: ZF := 0 = RBX
0000073b: #80 := RBX - RBP
0000073e: CF := RBX < RBP
00000741: OF := high:1[(RBX ^ RBP) & (RBX ^ #80)]
00000744: AF := 0x10 = (0x10 & (#80 ^ RBX ^ RBP))
00000747: PF :=
          ~low:1[let $1 = #80 >> 4 ^ #80 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000074a: SF := high:1[#80]
0000074d: ZF := 0 = #80
00000757: when ~ZF goto %000006df
0000085f: goto %00000619

00000619:
00000631: #71 := RSP
00000634: RSP := RSP + 8
00000637: CF := RSP < #71
0000063a: OF := ~high:1[#71] & (high:1[#71] | high:1[RSP]) &
          ~(high:1[#71] & high:1[RSP])
0000063d: AF := 0x10 = (0x10 & (RSP ^ #71 ^ 8))
00000640: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000643: SF := high:1[RSP]
00000646: ZF := 0 = RSP
0000064f: RBX := mem[RSP, el]:u64
00000652: RSP := RSP + 8
0000065b: RBP := mem[RSP, el]:u64
0000065e: RSP := RSP + 8
00000667: R12 := mem[RSP, el]:u64
0000066a: RSP := RSP + 8
00000673: R13 := mem[RSP, el]:u64
00000676: RSP := RSP + 8
0000067f: R14 := mem[RSP, el]:u64
00000682: RSP := RSP + 8
0000068b: R15 := mem[RSP, el]:u64
0000068e: RSP := RSP + 8
00000698: #74 := mem[RSP, el]:u64
0000069b: RSP := RSP + 8
0000069e: call #74 with noreturn

00000860: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000087a: __libc_start_main_main :: in u64 = RDI
0000087b: __libc_start_main_arg2 :: in u32 = RSI
0000087c: __libc_start_main_arg3 :: in out u64 = RDX
0000087d: __libc_start_main_auxv :: in out u64 = RCX
0000087e: __libc_start_main_result :: out u32 = RAX

00000080:
00000086: call @__libc_start_main@external with return %00000089

00000089:
0000008f: RSP := RSP - 8
00000092: mem := mem with [RSP, el]:u64 <- 0
0000009a: call @__libc_start_main@plt-0x10 with noreturn

00000861: sub __libc_start_main@plt-0x10(__libc_start_main@plt-0x10_result)
0000087f: __libc_start_main@plt-0x10_result :: out u32 = RAX

00000063:
0000006a: #8 := mem[0x601008, el]:u64
0000006d: RSP := RSP - 8
00000070: mem := mem with [RSP, el]:u64 <- #8
00000078: call mem[0x601010, el]:u64 with noreturn

00000862: sub _fini(_fini_result)
00000880: _fini_result :: out u32 = RAX

00000009:
00000015: #1 := RSP
00000019: RSP := RSP - 8
0000001c: CF := #1 < 8
0000001f: OF := high:1[(#1 ^ 8) & (#1 ^ RSP)]
00000022: AF := 0x10 = (0x10 & (RSP ^ #1 ^ 8))
00000025: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000028: SF := high:1[RSP]
0000002b: ZF := 0 = RSP
0000003a: #4 := RSP
0000003d: RSP := RSP + 8
00000040: CF := RSP < #4
00000043: OF := ~high:1[#4] & (high:1[#4] | high:1[RSP]) &
          ~(high:1[#4] & high:1[RSP])
00000046: AF := 0x10 = (0x10 & (RSP ^ #4 ^ 8))
00000049: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000004c: SF := high:1[RSP]
0000004f: ZF := 0 = RSP
00000059: #7 := mem[RSP, el]:u64
0000005c: RSP := RSP + 8
0000005f: call #7 with noreturn

00000863: sub _init(_init_result)
00000881: _init_result :: out u32 = RAX

0000009d:
000000a9: #10 := RSP
000000ac: RSP := RSP - 8
000000af: CF := #10 < 8
000000b2: OF := high:1[(#10 ^ 8) & (#10 ^ RSP)]
000000b5: AF := 0x10 = (0x10 & (RSP ^ #10 ^ 8))
000000b8: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000000bb: SF := high:1[RSP]
000000be: ZF := 0 = RSP
000000c6: RAX := mem[0x600FF8, el]:u64
000000d4: #13 := RAX
000000d7: OF := 0
000000da: CF := 0
000000dd: AF := unknown[bits]:u1
000000e0: PF :=
          ~low:1[let $1 = #13 >> 4 ^ #13 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000000e3: SF := high:1[#13]
000000e6: ZF := 0 = #13
000000f1: when ZF goto %000000eb
00000864: goto %0000012c

0000012c:
00000134: RSP := RSP - 8
00000137: mem := mem with [RSP, el]:u64 <- 0x4003D5
0000013a: call @__gmon_start__ with return %000000eb

000000eb:
00000103: #15 := RSP
00000106: RSP := RSP + 8
00000109: CF := RSP < #15
0000010c: OF := ~high:1[#15] & (high:1[#15] | high:1[RSP]) &
          ~(high:1[#15] & high:1[RSP])
0000010f: AF := 0x10 = (0x10 & (RSP ^ #15 ^ 8))
00000112: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000115: SF := high:1[RSP]
00000118: ZF := 0 = RSP
00000122: #18 := mem[RSP, el]:u64
00000125: RSP := RSP + 8
00000128: call #18 with noreturn

00000865: sub _start(_start_result)
00000882: _start_result :: out u32 = RAX

0000013d:
00000148: RBP := 0
0000014b: AF := unknown[bits]:u1
0000014e: ZF := 1
00000151: PF := 1
00000154: OF := 0
00000157: CF := 0
0000015a: SF := 0
00000162: R9 := RDX
0000016b: RSI := mem[RSP, el]:u64
0000016e: RSP := RSP + 8
00000176: RDX := RSP
00000184: RSP := RSP & 0xFFFFFFFFFFFFFFF0
00000187: OF := 0
0000018a: CF := 0
0000018d: AF := unknown[bits]:u1
00000190: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000193: SF := high:1[RSP]
00000196: ZF := 0 = RSP
000001a0: #20 := RAX
000001a3: RSP := RSP - 8
000001a6: mem := mem with [RSP, el]:u64 <- #20
000001b0: #21 := RSP
000001b3: RSP := RSP - 8
000001b6: mem := mem with [RSP, el]:u64 <- #21
000001be: R8 := 0x4005A0
000001c6: RCX := 0x400530
000001ce: RDI := 0x40051E
000001d8: RSP := RSP - 8
000001db: mem := mem with [RSP, el]:u64 <- 0x400439
000001de: call @__libc_start_main with return %000001e1

000001e1:
00000866: call @deregister_tm_clones with noreturn

00000867: sub deregister_tm_clones(deregister_tm_clones_result)
00000883: deregister_tm_clones_result :: out u32 = RAX

000001e9:
000001ee: RAX := 0x601037
000001f8: #22 := RBP
000001fb: RSP := RSP - 8
000001fe: mem := mem with [RSP, el]:u64 <- #22
0000020d: #23 := RAX
00000210: RAX := RAX - 0x601030
00000213: CF := #23 < 0x601030
00000216: OF := high:1[(#23 ^ 0x601030) & (#23 ^ RAX)]
00000219: AF := 0x10 = (0x10 & (RAX ^ #23 ^ 0x601030))
0000021c: PF :=
          ~low:1[let $1 = RAX >> 4 ^ RAX in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000021f: SF := high:1[RAX]
00000222: ZF := 0 = RAX
00000230: #26 := RAX - 0xE
00000233: CF := RAX < 0xE
00000236: OF := high:1[(RAX ^ 0xE) & (RAX ^ #26)]
00000239: AF := 0x10 = (0x10 & (#26 ^ RAX ^ 0xE))
0000023c: PF :=
          ~low:1[let $1 = #26 >> 4 ^ #26 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000023f: SF := high:1[#26]
00000242: ZF := 0 = #26
0000024a: RBP := RSP
00000255: when CF | ZF goto %0000024f
00000868: goto %000007f1

000007f1:
000007f6: RAX := 0
00000804: #85 := RAX
00000807: OF := 0
0000080a: CF := 0
0000080d: AF := unknown[bits]:u1
00000810: PF :=
          ~low:1[let $1 = #85 >> 4 ^ #85 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000813: SF := high:1[#85]
00000816: ZF := 0 = #85
00000820: when ZF goto %0000024f
00000869: goto %00000827

0000024f:
00000261: RBP := mem[RSP, el]:u64
00000264: RSP := RSP + 8
0000026e: #28 := mem[RSP, el]:u64
00000271: RSP := RSP + 8
00000274: call #28 with noreturn

00000827:
0000082d: RBP := mem[RSP, el]:u64
00000830: RSP := RSP + 8
00000838: RDI := 0x601030
00000840: call RAX with noreturn

0000086a: sub foo(foo_result)
00000884: foo_result :: out u32 = RAX

000004b5:
000004bc: #53 := mem[RSP, el]:u64
000004bf: RSP := RSP + 8
000004c2: call #53 with noreturn

0000086b: sub frame_dummy(frame_dummy_result)
00000885: frame_dummy_result :: out u32 = RAX

000003d2:
000003d7: RDI := 0x600E20
000003e5: #46 := mem[RDI, el]:u64
000003e8: CF := mem[RDI, el]:u64 < 0
000003eb: OF := high:1[mem[RDI, el]:u64 & (mem[RDI, el]:u64 ^ #46)]
000003ee: AF := 0x10 = (0x10 & (#46 ^ mem[RDI, el]:u64))
000003f1: PF :=
          ~low:1[let $1 = #46 >> 4 ^ #46 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000003f4: SF := high:1[#46]
000003f7: ZF := 0 = #46
00000402: when ~ZF goto %000003fc
0000086c: goto %00000432

000003fc:
0000040d: RAX := 0
0000041b: #48 := RAX
0000041e: OF := 0
00000421: CF := 0
00000424: AF := unknown[bits]:u1
00000427: PF :=
          ~low:1[let $1 = #48 >> 4 ^ #48 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000042a: SF := high:1[#48]
0000042d: ZF := 0 = #48
00000438: when ZF goto %00000432
0000086d: goto %0000044a

0000044a:
00000451: #50 := RBP
00000454: RSP := RSP - 8
00000457: mem := mem with [RSP, el]:u64 <- #50
0000045f: RBP := RSP
0000046a: #51 := RAX
0000046d: RSP := RSP - 8
00000470: mem := mem with [RSP, el]:u64 <- 0x400500
00000473: call #51 with return %00000477

00000477:
0000047d: RBP := mem[RSP, el]:u64
00000480: RSP := RSP + 8
00000488: call @register_tm_clones with noreturn

00000432:
00000443: call @register_tm_clones with noreturn

0000086e: sub main(main_argc, main_argv, main_result)
00000886: main_argc :: in u32 = RDI
00000887: main_argv :: in out u64 = RSI
00000888: main_result :: out u32 = RAX

000004c6:
000004cd: RSP := RSP - 8
000004d0: mem := mem with [RSP, el]:u64 <- 0x400523
000004d3: call @foo with return %000004d6

000004d6:
000004dd: #54 := mem[RSP, el]:u64
000004e0: RSP := RSP + 8
000004e3: call #54 with noreturn

0000086f: sub main.end(main\.end_result)
00000889: main\.end_result :: out u32 = RAX

000004e7:
00000870: call @__libc_csu_init with noreturn

00000871: sub register_tm_clones(register_tm_clones_result)
0000088a: register_tm_clones_result :: out u32 = RAX

00000280:
00000285: RSI := 0x601030
0000028f: #29 := RBP
00000292: RSP := RSP - 8
00000295: mem := mem with [RSP, el]:u64 <- #29
000002a4: #30 := RSI
000002a7: RSI := RSI - 0x601030
000002aa: CF := #30 < 0x601030
000002ad: OF := high:1[(#30 ^ 0x601030) & (#30 ^ RSI)]
000002b0: AF := 0x10 = (0x10 & (RSI ^ #30 ^ 0x601030))
000002b3: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000002b6: SF := high:1[RSI]
000002b9: ZF := 0 = RSI
000002c8: #33 := RSI
000002cb: RSI := RSI ~>> 3
000002ce: CF := high:1[#33 << 0x3D]
000002d1: SF := high:1[RSI]
000002d4: ZF := 0 = RSI
000002d7: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000002da: AF := unknown[bits]:u1
000002dd: OF := unknown[bits]:u1
000002e5: RBP := RSP
000002ed: RAX := RSI
000002fc: #35 := RAX
000002ff: RAX := RAX >> 0x3F
00000302: CF := high:1[#35 << 1]
00000305: SF := high:1[RAX]
00000308: ZF := 0 = RAX
0000030b: PF :=
          ~low:1[let $1 = RAX >> 4 ^ RAX in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000030e: AF := unknown[bits]:u1
00000311: OF := unknown[bits]:u1
00000321: #37 := RSI
00000324: #38 := RAX
00000327: RSI := RSI + #38
0000032a: CF := RSI < #37
0000032d: OF := high:1[#37] = high:1[#38] & (high:1[#37] | high:1[RSI]) &
          ~(high:1[#37] & high:1[RSI])
00000330: AF := 0x10 = (0x10 & (RSI ^ #37 ^ #38))
00000333: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000336: SF := high:1[RSI]
00000339: ZF := 0 = RSI
00000348: #40 := RSI
0000034b: RSI := RSI ~>> 1
0000034e: CF := high:1[#40 << 0x3F]
00000351: SF := high:1[RSI]
00000354: ZF := 0 = RSI
00000357: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000035a: AF := unknown[bits]:u1
0000035d: OF := 0
00000368: when ZF goto %00000362
00000872: goto %0000079a

0000079a:
0000079f: RAX := 0
000007ad: #83 := RAX
000007b0: OF := 0
000007b3: CF := 0
000007b6: AF := unknown[bits]:u1
000007b9: PF :=
          ~low:1[let $1 = #83 >> 4 ^ #83 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000007bc: SF := high:1[#83]
000007bf: ZF := 0 = #83
000007c9: when ZF goto %00000362
00000873: goto %000007d0

00000362:
00000374: RBP := mem[RSP, el]:u64
00000377: RSP := RSP + 8
00000381: #42 := mem[RSP, el]:u64
00000384: RSP := RSP + 8
00000387: call #42 with noreturn

000007d0:
000007d6: RBP := mem[RSP, el]:u64
000007d9: RSP := RSP + 8
000007e1: RDI := 0x601030
000007e9: call RAX with noreturn

0000084b: sub __gmon_start__@external(__gmon_start__@external_result)
0000088b: __gmon_start__@external_result :: out u32 = RAX

00000084: sub __libc_start_main@external(__libc_start_main@external_result)
0000088c: __libc_start_main@external_result :: out u32 = RAX
