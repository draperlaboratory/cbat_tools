00000964: program
00000947: sub __assert_fail(__assert_fail_result)
00000965: __assert_fail_result :: out u32 = RAX

00000080:
00000086: call @__assert_fail@external with return %00000089

00000089:
0000008f: RSP := RSP - 8
00000092: mem := mem with [RSP, el]:u64 <- 0
0000009a: call @__assert_fail@plt-0x10 with noreturn

00000948: sub __assert_fail@plt-0x10(__assert_fail@plt-0x10_result)
00000966: __assert_fail@plt-0x10_result :: out u32 = RAX

00000063:
0000006a: #8 := mem[0x601008, el]:u64
0000006d: RSP := RSP - 8
00000070: mem := mem with [RSP, el]:u64 <- #8
00000078: call mem[0x601010, el]:u64 with noreturn

00000949: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000967: __do_global_dtors_aux_result :: out u32 = RAX

000003ac:
000003b7: #44 := mem[0x601038]
000003ba: CF := mem[0x601038] < 0
000003bd: OF := high:1[mem[0x601038] & (mem[0x601038] ^ #44)]
000003c0: AF := 0x10 = (0x10 & (#44 ^ mem[0x601038]))
000003c3: PF :=
          ~low:1[let $1 = #44 >> 4 ^ #44 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000003c6: SF := high:1[#44]
000003c9: ZF := 0 = #44
000003d4: when ~ZF goto %000003ce
0000094a: goto %0000084f

0000084f:
00000856: #89 := RBP
00000859: RSP := RSP - 8
0000085c: mem := mem with [RSP, el]:u64 <- #89
00000864: RBP := RSP
0000086e: RSP := RSP - 8
00000871: mem := mem with [RSP, el]:u64 <- 0x4004F2
00000874: call @deregister_tm_clones with return %00000877

00000877:
0000087d: RBP := mem[RSP, el]:u64
00000880: RSP := RSP + 8
00000888: mem := mem with [0x601038] <- 1
0000094b: goto %000003ce

000003ce:
000003e1: #46 := mem[RSP, el]:u64
000003e4: RSP := RSP + 8
000003e7: call #46 with noreturn

0000094c: sub __gmon_start__(__gmon_start___result)
00000968: __gmon_start___result :: out u32 = RAX

0000014d:
0000093e: call @__gmon_start__@external with noreturn

0000094d: sub __libc_csu_fini(__libc_csu_fini_result)
00000969: __libc_csu_fini_result :: out u32 = RAX

0000076b:
00000772: #82 := mem[RSP, el]:u64
00000775: RSP := RSP + 8
00000778: call #82 with noreturn

0000094e: sub __libc_csu_init(__libc_csu_init_result)
0000096a: __libc_csu_init_result :: out u32 = RAX

000005b0:
000005b7: #62 := R15
000005ba: RSP := RSP - 8
000005bd: mem := mem with [RSP, el]:u64 <- #62
000005c7: #63 := R14
000005ca: RSP := RSP - 8
000005cd: mem := mem with [RSP, el]:u64 <- #63
000005d5: R15 := pad:64[low:32[RDI]]
000005df: #64 := R13
000005e2: RSP := RSP - 8
000005e5: mem := mem with [RSP, el]:u64 <- #64
000005ef: #65 := R12
000005f2: RSP := RSP - 8
000005f5: mem := mem with [RSP, el]:u64 <- #65
000005fd: R12 := 0x600E10
00000607: #66 := RBP
0000060a: RSP := RSP - 8
0000060d: mem := mem with [RSP, el]:u64 <- #66
00000615: RBP := 0x600E18
0000061f: #67 := RBX
00000622: RSP := RSP - 8
00000625: mem := mem with [RSP, el]:u64 <- #67
0000062d: R14 := RSI
00000635: R13 := RDX
00000645: #68 := RBP
00000648: #69 := R12
0000064b: RBP := RBP - R12
0000064e: CF := #68 < #69
00000651: OF := high:1[(#68 ^ #69) & (#68 ^ RBP)]
00000654: AF := 0x10 = (0x10 & (RBP ^ #68 ^ #69))
00000657: PF :=
          ~low:1[let $1 = RBP >> 4 ^ RBP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000065a: SF := high:1[RBP]
0000065d: ZF := 0 = RBP
0000066c: #71 := RSP
0000066f: RSP := RSP - 8
00000672: CF := #71 < 8
00000675: OF := high:1[(#71 ^ 8) & (#71 ^ RSP)]
00000678: AF := 0x10 = (0x10 & (RSP ^ #71 ^ 8))
0000067b: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000067e: SF := high:1[RSP]
00000681: ZF := 0 = RSP
00000690: #74 := RBP
00000693: RBP := RBP ~>> 3
00000696: CF := high:1[#74 << 0x3D]
00000699: SF := high:1[RBP]
0000069c: ZF := 0 = RBP
0000069f: PF :=
          ~low:1[let $1 = RBP >> 4 ^ RBP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000006a2: AF := unknown[bits]:u1
000006a5: OF := unknown[bits]:u1
000006af: RSP := RSP - 8
000006b2: mem := mem with [RSP, el]:u64 <- 0x4005B1
000006b5: call @_init with return %000006b8

000006b8:
000006c3: #76 := RBP
000006c6: OF := 0
000006c9: CF := 0
000006cc: AF := unknown[bits]:u1
000006cf: PF :=
          ~low:1[let $1 = #76 >> 4 ^ #76 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000006d2: SF := high:1[#76]
000006d5: ZF := 0 = #76
000006e0: when ZF goto %000006da
0000094f: goto %0000077c

0000077c:
00000787: RBX := 0
0000078a: AF := unknown[bits]:u1
0000078d: ZF := 1
00000790: PF := 1
00000793: OF := 0
00000796: CF := 0
00000799: SF := 0
00000950: goto %000007a0

000007a0:
000007a5: RDX := R13
000007ad: RSI := R14
000007b5: RDI := pad:64[low:32[R15]]
000007c0: #83 := mem[R12 + (RBX << 3), el]:u64
000007c3: RSP := RSP - 8
000007c6: mem := mem with [RSP, el]:u64 <- 0x4005CD
000007c9: call #83 with return %000007cd

000007cd:
000007d9: #84 := RBX
000007dc: RBX := RBX + 1
000007df: CF := RBX < #84
000007e2: OF := ~high:1[#84] & (high:1[#84] | high:1[RBX]) &
          ~(high:1[#84] & high:1[RBX])
000007e5: AF := 0x10 = (0x10 & (RBX ^ #84 ^ 1))
000007e8: PF :=
          ~low:1[let $1 = RBX >> 4 ^ RBX in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000007eb: SF := high:1[RBX]
000007ee: ZF := 0 = RBX
000007fc: #87 := RBX - RBP
000007ff: CF := RBX < RBP
00000802: OF := high:1[(RBX ^ RBP) & (RBX ^ #87)]
00000805: AF := 0x10 = (0x10 & (#87 ^ RBX ^ RBP))
00000808: PF :=
          ~low:1[let $1 = #87 >> 4 ^ #87 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000080b: SF := high:1[#87]
0000080e: ZF := 0 = #87
00000818: when ~ZF goto %000007a0
00000951: goto %000006da

000006da:
000006f2: #78 := RSP
000006f5: RSP := RSP + 8
000006f8: CF := RSP < #78
000006fb: OF := ~high:1[#78] & (high:1[#78] | high:1[RSP]) &
          ~(high:1[#78] & high:1[RSP])
000006fe: AF := 0x10 = (0x10 & (RSP ^ #78 ^ 8))
00000701: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000704: SF := high:1[RSP]
00000707: ZF := 0 = RSP
00000710: RBX := mem[RSP, el]:u64
00000713: RSP := RSP + 8
0000071c: RBP := mem[RSP, el]:u64
0000071f: RSP := RSP + 8
00000728: R12 := mem[RSP, el]:u64
0000072b: RSP := RSP + 8
00000734: R13 := mem[RSP, el]:u64
00000737: RSP := RSP + 8
00000740: R14 := mem[RSP, el]:u64
00000743: RSP := RSP + 8
0000074c: R15 := mem[RSP, el]:u64
0000074f: RSP := RSP + 8
00000759: #81 := mem[RSP, el]:u64
0000075c: RSP := RSP + 8
0000075f: call #81 with noreturn

00000952: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000096b: __libc_start_main_main :: in u64 = RDI
0000096c: __libc_start_main_arg2 :: in u32 = RSI
0000096d: __libc_start_main_arg3 :: in out u64 = RDX
0000096e: __libc_start_main_auxv :: in out u64 = RCX
0000096f: __libc_start_main_result :: out u32 = RAX

0000009d:
000000a3: call @__libc_start_main@external with return %000000a6

000000a6:
000000ac: RSP := RSP - 8
000000af: mem := mem with [RSP, el]:u64 <- 1
000000b7: call @__assert_fail@plt-0x10 with noreturn

00000953: sub _fini(_fini_result)
00000970: _fini_result :: out u32 = RAX

00000009:
00000015: #1 := RSP
00000019: RSP := RSP - 8
0000001c: CF := #1 < 8
0000001f: OF := high:1[(#1 ^ 8) & (#1 ^ RSP)]
00000022: AF := 0x10 = (0x10 & (RSP ^ #1 ^ 8))
00000025: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000028: SF := high:1[RSP]
0000002b: ZF := 0 = RSP
0000003a: #4 := RSP
0000003d: RSP := RSP + 8
00000040: CF := RSP < #4
00000043: OF := ~high:1[#4] & (high:1[#4] | high:1[RSP]) &
          ~(high:1[#4] & high:1[RSP])
00000046: AF := 0x10 = (0x10 & (RSP ^ #4 ^ 8))
00000049: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000004c: SF := high:1[RSP]
0000004f: ZF := 0 = RSP
00000059: #7 := mem[RSP, el]:u64
0000005c: RSP := RSP + 8
0000005f: call #7 with noreturn

00000954: sub _init(_init_result)
00000971: _init_result :: out u32 = RAX

000000ba:
000000c6: #11 := RSP
000000c9: RSP := RSP - 8
000000cc: CF := #11 < 8
000000cf: OF := high:1[(#11 ^ 8) & (#11 ^ RSP)]
000000d2: AF := 0x10 = (0x10 & (RSP ^ #11 ^ 8))
000000d5: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000000d8: SF := high:1[RSP]
000000db: ZF := 0 = RSP
000000e3: RAX := mem[0x600FF8, el]:u64
000000f1: #14 := RAX
000000f4: OF := 0
000000f7: CF := 0
000000fa: AF := unknown[bits]:u1
000000fd: PF :=
          ~low:1[let $1 = #14 >> 4 ^ #14 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000100: SF := high:1[#14]
00000103: ZF := 0 = #14
0000010e: when ZF goto %00000108
00000955: goto %00000149

00000149:
00000151: RSP := RSP - 8
00000154: mem := mem with [RSP, el]:u64 <- 0x4003E5
00000157: call @__gmon_start__ with return %00000108

00000108:
00000120: #16 := RSP
00000123: RSP := RSP + 8
00000126: CF := RSP < #16
00000129: OF := ~high:1[#16] & (high:1[#16] | high:1[RSP]) &
          ~(high:1[#16] & high:1[RSP])
0000012c: AF := 0x10 = (0x10 & (RSP ^ #16 ^ 8))
0000012f: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000132: SF := high:1[RSP]
00000135: ZF := 0 = RSP
0000013f: #19 := mem[RSP, el]:u64
00000142: RSP := RSP + 8
00000145: call #19 with noreturn

00000956: sub _start(_start_result)
00000972: _start_result :: out u32 = RAX

0000015a:
00000165: RBP := 0
00000168: AF := unknown[bits]:u1
0000016b: ZF := 1
0000016e: PF := 1
00000171: OF := 0
00000174: CF := 0
00000177: SF := 0
0000017f: R9 := RDX
00000188: RSI := mem[RSP, el]:u64
0000018b: RSP := RSP + 8
00000193: RDX := RSP
000001a1: RSP := RSP & 0xFFFFFFFFFFFFFFF0
000001a4: OF := 0
000001a7: CF := 0
000001aa: AF := unknown[bits]:u1
000001ad: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000001b0: SF := high:1[RSP]
000001b3: ZF := 0 = RSP
000001bd: #21 := RAX
000001c0: RSP := RSP - 8
000001c3: mem := mem with [RSP, el]:u64 <- #21
000001cd: #22 := RSP
000001d0: RSP := RSP - 8
000001d3: mem := mem with [RSP, el]:u64 <- #22
000001db: R8 := 0x4005F0
000001e3: RCX := 0x400580
000001eb: RDI := 0x400531
000001f5: RSP := RSP - 8
000001f8: mem := mem with [RSP, el]:u64 <- 0x400459
000001fb: call @__libc_start_main with return %000001fe

000001fe:
00000957: call @deregister_tm_clones with noreturn

00000958: sub deregister_tm_clones(deregister_tm_clones_result)
00000973: deregister_tm_clones_result :: out u32 = RAX

00000206:
0000020b: RAX := 0x60103F
00000215: #23 := RBP
00000218: RSP := RSP - 8
0000021b: mem := mem with [RSP, el]:u64 <- #23
0000022a: #24 := RAX
0000022d: RAX := RAX - 0x601038
00000230: CF := #24 < 0x601038
00000233: OF := high:1[(#24 ^ 0x601038) & (#24 ^ RAX)]
00000236: AF := 0x10 = (0x10 & (RAX ^ #24 ^ 0x601038))
00000239: PF :=
          ~low:1[let $1 = RAX >> 4 ^ RAX in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000023c: SF := high:1[RAX]
0000023f: ZF := 0 = RAX
0000024d: #27 := RAX - 0xE
00000250: CF := RAX < 0xE
00000253: OF := high:1[(RAX ^ 0xE) & (RAX ^ #27)]
00000256: AF := 0x10 = (0x10 & (#27 ^ RAX ^ 0xE))
00000259: PF :=
          ~low:1[let $1 = #27 >> 4 ^ #27 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000025c: SF := high:1[#27]
0000025f: ZF := 0 = #27
00000267: RBP := RSP
00000272: when CF | ZF goto %0000026c
00000959: goto %000008e2

000008e2:
000008e7: RAX := 0
000008f5: #92 := RAX
000008f8: OF := 0
000008fb: CF := 0
000008fe: AF := unknown[bits]:u1
00000901: PF :=
          ~low:1[let $1 = #92 >> 4 ^ #92 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000904: SF := high:1[#92]
00000907: ZF := 0 = #92
00000911: when ZF goto %0000026c
0000095a: goto %00000918

0000026c:
0000027e: RBP := mem[RSP, el]:u64
00000281: RSP := RSP + 8
0000028b: #29 := mem[RSP, el]:u64
0000028e: RSP := RSP + 8
00000291: call #29 with noreturn

00000918:
0000091e: RBP := mem[RSP, el]:u64
00000921: RSP := RSP + 8
00000929: RDI := 0x601038
00000931: call RAX with noreturn

0000095b: sub frame_dummy(frame_dummy_result)
00000974: frame_dummy_result :: out u32 = RAX

000003ef:
000003f4: RDI := 0x600E20
00000402: #47 := mem[RDI, el]:u64
00000405: CF := mem[RDI, el]:u64 < 0
00000408: OF := high:1[mem[RDI, el]:u64 & (mem[RDI, el]:u64 ^ #47)]
0000040b: AF := 0x10 = (0x10 & (#47 ^ mem[RDI, el]:u64))
0000040e: PF :=
          ~low:1[let $1 = #47 >> 4 ^ #47 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000411: SF := high:1[#47]
00000414: ZF := 0 = #47
0000041f: when ~ZF goto %00000419
0000095c: goto %0000044f

00000419:
0000042a: RAX := 0
00000438: #49 := RAX
0000043b: OF := 0
0000043e: CF := 0
00000441: AF := unknown[bits]:u1
00000444: PF :=
          ~low:1[let $1 = #49 >> 4 ^ #49 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000447: SF := high:1[#49]
0000044a: ZF := 0 = #49
00000455: when ZF goto %0000044f
0000095d: goto %00000467

00000467:
0000046e: #51 := RBP
00000471: RSP := RSP - 8
00000474: mem := mem with [RSP, el]:u64 <- #51
0000047c: RBP := RSP
00000487: #52 := RAX
0000048a: RSP := RSP - 8
0000048d: mem := mem with [RSP, el]:u64 <- 0x400520
00000490: call #52 with return %00000494

00000494:
0000049a: RBP := mem[RSP, el]:u64
0000049d: RSP := RSP + 8
000004a5: call @register_tm_clones with noreturn

0000044f:
00000460: call @register_tm_clones with noreturn

0000095e: sub g(g_result)
00000975: g_result :: out u32 = RAX

000004a8:
000004af: #53 := RBP
000004b2: RSP := RSP - 8
000004b5: mem := mem with [RSP, el]:u64 <- #53
000004bd: RBP := RSP
000004c5: RAX := 0x67
000004ce: RBP := mem[RSP, el]:u64
000004d1: RSP := RSP + 8
000004db: #54 := mem[RSP, el]:u64
000004de: RSP := RSP + 8
000004e1: call #54 with noreturn

0000095f: sub main(main_argc, main_argv, main_result)
00000976: main_argc :: in u32 = RDI
00000977: main_argv :: in out u64 = RSI
00000978: main_result :: out u32 = RAX

000004e5:
000004ec: #55 := RBP
000004ef: RSP := RSP - 8
000004f2: mem := mem with [RSP, el]:u64 <- #55
000004fa: RBP := RSP
00000509: #56 := RSP
0000050c: RSP := RSP - 0x10
0000050f: CF := #56 < 0x10
00000512: OF := high:1[(#56 ^ 0x10) & (#56 ^ RSP)]
00000515: AF := 0x10 = (0x10 & (RSP ^ #56 ^ 0x10))
00000518: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000051b: SF := high:1[RSP]
0000051e: ZF := 0 = RSP
00000526: mem := mem with [RBP - 4, el]:u32 <- low:32[RDI]
0000052e: mem := mem with [RBP - 0x10, el]:u64 <- RSI
00000536: RAX := 0
00000540: RSP := RSP - 8
00000543: mem := mem with [RSP, el]:u64 <- 0x40054A
00000546: call @g with return %00000549

00000549:
0000054e: mem := mem with [RBP - 4, el]:u32 <- low:32[RAX]
0000055c: #59 := mem[RBP - 4, el]:u32 - 0x67
0000055f: CF := mem[RBP - 4, el]:u32 < 0x67
00000562: OF := high:1[(mem[RBP - 4, el]:u32 ^ 0x67) &
          (mem[RBP - 4, el]:u32 ^ #59)]
00000565: AF := 0x10 = (0x10 & (#59 ^ mem[RBP - 4, el]:u32 ^ 0x67))
00000568: PF :=
          ~low:1[let $1 = #59 >> 4 ^ #59 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000056b: SF := high:1[#59]
0000056e: ZF := 0 = #59
00000579: when ~ZF goto %00000573
00000960: goto %0000081f

0000081f:
00000824: RCX := 0x40060D
0000082c: RDX := 0x10
00000834: RSI := 0x400604
0000083c: RDI := 0x40060B
00000846: RSP := RSP - 8
00000849: mem := mem with [RSP, el]:u64 <- 0x40056C
0000084c: call @__assert_fail with return %00000573

00000573:
00000584: RAX := pad:64[mem[RBP - 4, el]:u32]
0000058e: RSP := RBP
00000591: RBP := mem[RSP, el]:u64
00000594: RSP := RSP + 8
0000059e: #61 := mem[RSP, el]:u64
000005a1: RSP := RSP + 8
000005a4: call #61 with noreturn

00000961: sub register_tm_clones(register_tm_clones_result)
00000979: register_tm_clones_result :: out u32 = RAX

0000029d:
000002a2: RSI := 0x601038
000002ac: #30 := RBP
000002af: RSP := RSP - 8
000002b2: mem := mem with [RSP, el]:u64 <- #30
000002c1: #31 := RSI
000002c4: RSI := RSI - 0x601038
000002c7: CF := #31 < 0x601038
000002ca: OF := high:1[(#31 ^ 0x601038) & (#31 ^ RSI)]
000002cd: AF := 0x10 = (0x10 & (RSI ^ #31 ^ 0x601038))
000002d0: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000002d3: SF := high:1[RSI]
000002d6: ZF := 0 = RSI
000002e5: #34 := RSI
000002e8: RSI := RSI ~>> 3
000002eb: CF := high:1[#34 << 0x3D]
000002ee: SF := high:1[RSI]
000002f1: ZF := 0 = RSI
000002f4: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000002f7: AF := unknown[bits]:u1
000002fa: OF := unknown[bits]:u1
00000302: RBP := RSP
0000030a: RAX := RSI
00000319: #36 := RAX
0000031c: RAX := RAX >> 0x3F
0000031f: CF := high:1[#36 << 1]
00000322: SF := high:1[RAX]
00000325: ZF := 0 = RAX
00000328: PF :=
          ~low:1[let $1 = RAX >> 4 ^ RAX in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000032b: AF := unknown[bits]:u1
0000032e: OF := unknown[bits]:u1
0000033e: #38 := RSI
00000341: #39 := RAX
00000344: RSI := RSI + #39
00000347: CF := RSI < #38
0000034a: OF := high:1[#38] = high:1[#39] & (high:1[#38] | high:1[RSI]) &
          ~(high:1[#38] & high:1[RSI])
0000034d: AF := 0x10 = (0x10 & (RSI ^ #38 ^ #39))
00000350: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000353: SF := high:1[RSI]
00000356: ZF := 0 = RSI
00000365: #41 := RSI
00000368: RSI := RSI ~>> 1
0000036b: CF := high:1[#41 << 0x3F]
0000036e: SF := high:1[RSI]
00000371: ZF := 0 = RSI
00000374: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000377: AF := unknown[bits]:u1
0000037a: OF := 0
00000385: when ZF goto %0000037f
00000962: goto %0000088b

0000088b:
00000890: RAX := 0
0000089e: #90 := RAX
000008a1: OF := 0
000008a4: CF := 0
000008a7: AF := unknown[bits]:u1
000008aa: PF :=
          ~low:1[let $1 = #90 >> 4 ^ #90 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000008ad: SF := high:1[#90]
000008b0: ZF := 0 = #90
000008ba: when ZF goto %0000037f
00000963: goto %000008c1

0000037f:
00000391: RBP := mem[RSP, el]:u64
00000394: RSP := RSP + 8
0000039e: #43 := mem[RSP, el]:u64
000003a1: RSP := RSP + 8
000003a4: call #43 with noreturn

000008c1:
000008c7: RBP := mem[RSP, el]:u64
000008ca: RSP := RSP + 8
000008d2: RDI := 0x601038
000008da: call RAX with noreturn

00000084: sub __assert_fail@external(__assert_fail@external_result)
0000097a: __assert_fail@external_result :: out u32 = RAX

0000093c: sub __gmon_start__@external(__gmon_start__@external_result)
0000097b: __gmon_start__@external_result :: out u32 = RAX

000000a1: sub __libc_start_main@external(__libc_start_main@external_result)
0000097c: __libc_start_main@external_result :: out u32 = RAX
