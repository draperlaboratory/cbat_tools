000008cb: program
000008b0: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008cc: __do_global_dtors_aux_result :: out u32 = RAX

0000038f:
0000039a: #43 := mem[0x601030]
0000039d: CF := mem[0x601030] < 0
000003a0: OF := high:1[mem[0x601030] & (mem[0x601030] ^ #43)]
000003a3: AF := 0x10 = (0x10 & (#43 ^ mem[0x601030]))
000003a6: PF :=
          ~low:1[let $1 = #43 >> 4 ^ #43 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000003a9: SF := high:1[#43]
000003ac: ZF := 0 = #43
000003b7: when ~ZF goto %000003b1
000008b1: goto %000007b8

000007b8:
000007bf: #86 := RBP
000007c2: RSP := RSP - 8
000007c5: mem := mem with [RSP, el]:u64 <- #86
000007cd: RBP := RSP
000007d7: RSP := RSP - 8
000007da: mem := mem with [RSP, el]:u64 <- 0x4004A2
000007dd: call @deregister_tm_clones with return %000007e0

000007e0:
000007e6: RBP := mem[RSP, el]:u64
000007e9: RSP := RSP + 8
000007f1: mem := mem with [0x601030] <- 1
000008b2: goto %000003b1

000003b1:
000003c4: #45 := mem[RSP, el]:u64
000003c7: RSP := RSP + 8
000003ca: call #45 with noreturn

000008b3: sub __gmon_start__(__gmon_start___result)
000008cd: __gmon_start___result :: out u32 = RAX

00000130:
000008a7: call @__gmon_start__@external with noreturn

000008b4: sub __libc_csu_fini(__libc_csu_fini_result)
000008ce: __libc_csu_fini_result :: out u32 = RAX

00000704:
0000070b: #79 := mem[RSP, el]:u64
0000070e: RSP := RSP + 8
00000711: call #79 with noreturn

000008b5: sub __libc_csu_init(__libc_csu_init_result)
000008cf: __libc_csu_init_result :: out u32 = RAX

00000549:
00000550: #59 := R15
00000553: RSP := RSP - 8
00000556: mem := mem with [RSP, el]:u64 <- #59
00000560: #60 := R14
00000563: RSP := RSP - 8
00000566: mem := mem with [RSP, el]:u64 <- #60
0000056e: R15 := pad:64[low:32[RDI]]
00000578: #61 := R13
0000057b: RSP := RSP - 8
0000057e: mem := mem with [RSP, el]:u64 <- #61
00000588: #62 := R12
0000058b: RSP := RSP - 8
0000058e: mem := mem with [RSP, el]:u64 <- #62
00000596: R12 := 0x600E10
000005a0: #63 := RBP
000005a3: RSP := RSP - 8
000005a6: mem := mem with [RSP, el]:u64 <- #63
000005ae: RBP := 0x600E18
000005b8: #64 := RBX
000005bb: RSP := RSP - 8
000005be: mem := mem with [RSP, el]:u64 <- #64
000005c6: R14 := RSI
000005ce: R13 := RDX
000005de: #65 := RBP
000005e1: #66 := R12
000005e4: RBP := RBP - R12
000005e7: CF := #65 < #66
000005ea: OF := high:1[(#65 ^ #66) & (#65 ^ RBP)]
000005ed: AF := 0x10 = (0x10 & (RBP ^ #65 ^ #66))
000005f0: PF :=
          ~low:1[let $1 = RBP >> 4 ^ RBP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000005f3: SF := high:1[RBP]
000005f6: ZF := 0 = RBP
00000605: #68 := RSP
00000608: RSP := RSP - 8
0000060b: CF := #68 < 8
0000060e: OF := high:1[(#68 ^ 8) & (#68 ^ RSP)]
00000611: AF := 0x10 = (0x10 & (RSP ^ #68 ^ 8))
00000614: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000617: SF := high:1[RSP]
0000061a: ZF := 0 = RSP
00000629: #71 := RBP
0000062c: RBP := RBP ~>> 3
0000062f: CF := high:1[#71 << 0x3D]
00000632: SF := high:1[RBP]
00000635: ZF := 0 = RBP
00000638: PF :=
          ~low:1[let $1 = RBP >> 4 ^ RBP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000063b: AF := unknown[bits]:u1
0000063e: OF := unknown[bits]:u1
00000648: RSP := RSP - 8
0000064b: mem := mem with [RSP, el]:u64 <- 0x400531
0000064e: call @_init with return %00000651

00000651:
0000065c: #73 := RBP
0000065f: OF := 0
00000662: CF := 0
00000665: AF := unknown[bits]:u1
00000668: PF :=
          ~low:1[let $1 = #73 >> 4 ^ #73 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000066b: SF := high:1[#73]
0000066e: ZF := 0 = #73
00000679: when ZF goto %00000673
000008b6: goto %00000715

00000715:
00000720: RBX := 0
00000723: AF := unknown[bits]:u1
00000726: ZF := 1
00000729: PF := 1
0000072c: OF := 0
0000072f: CF := 0
00000732: SF := 0
000008b7: goto %00000739

00000739:
0000073e: RDX := R13
00000746: RSI := R14
0000074e: RDI := pad:64[low:32[R15]]
00000759: #80 := mem[R12 + (RBX << 3), el]:u64
0000075c: RSP := RSP - 8
0000075f: mem := mem with [RSP, el]:u64 <- 0x40054D
00000762: call #80 with return %00000766

00000766:
00000772: #81 := RBX
00000775: RBX := RBX + 1
00000778: CF := RBX < #81
0000077b: OF := ~high:1[#81] & (high:1[#81] | high:1[RBX]) &
          ~(high:1[#81] & high:1[RBX])
0000077e: AF := 0x10 = (0x10 & (RBX ^ #81 ^ 1))
00000781: PF :=
          ~low:1[let $1 = RBX >> 4 ^ RBX in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000784: SF := high:1[RBX]
00000787: ZF := 0 = RBX
00000795: #84 := RBX - RBP
00000798: CF := RBX < RBP
0000079b: OF := high:1[(RBX ^ RBP) & (RBX ^ #84)]
0000079e: AF := 0x10 = (0x10 & (#84 ^ RBX ^ RBP))
000007a1: PF :=
          ~low:1[let $1 = #84 >> 4 ^ #84 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000007a4: SF := high:1[#84]
000007a7: ZF := 0 = #84
000007b1: when ~ZF goto %00000739
000008b8: goto %00000673

00000673:
0000068b: #75 := RSP
0000068e: RSP := RSP + 8
00000691: CF := RSP < #75
00000694: OF := ~high:1[#75] & (high:1[#75] | high:1[RSP]) &
          ~(high:1[#75] & high:1[RSP])
00000697: AF := 0x10 = (0x10 & (RSP ^ #75 ^ 8))
0000069a: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000069d: SF := high:1[RSP]
000006a0: ZF := 0 = RSP
000006a9: RBX := mem[RSP, el]:u64
000006ac: RSP := RSP + 8
000006b5: RBP := mem[RSP, el]:u64
000006b8: RSP := RSP + 8
000006c1: R12 := mem[RSP, el]:u64
000006c4: RSP := RSP + 8
000006cd: R13 := mem[RSP, el]:u64
000006d0: RSP := RSP + 8
000006d9: R14 := mem[RSP, el]:u64
000006dc: RSP := RSP + 8
000006e5: R15 := mem[RSP, el]:u64
000006e8: RSP := RSP + 8
000006f2: #78 := mem[RSP, el]:u64
000006f5: RSP := RSP + 8
000006f8: call #78 with noreturn

000008b9: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008d0: __libc_start_main_main :: in u64 = RDI
000008d1: __libc_start_main_arg2 :: in u32 = RSI
000008d2: __libc_start_main_arg3 :: in out u64 = RDX
000008d3: __libc_start_main_auxv :: in out u64 = RCX
000008d4: __libc_start_main_result :: out u32 = RAX

00000080:
00000086: call @__libc_start_main@external with return %00000089

00000089:
0000008f: RSP := RSP - 8
00000092: mem := mem with [RSP, el]:u64 <- 0
0000009a: call @__libc_start_main@plt-0x10 with noreturn

000008ba: sub __libc_start_main@plt-0x10(__libc_start_main@plt-0x10_result)
000008d5: __libc_start_main@plt-0x10_result :: out u32 = RAX

00000063:
0000006a: #8 := mem[0x601008, el]:u64
0000006d: RSP := RSP - 8
00000070: mem := mem with [RSP, el]:u64 <- #8
00000078: call mem[0x601010, el]:u64 with noreturn

000008bb: sub _fini(_fini_result)
000008d6: _fini_result :: out u32 = RAX

00000009:
00000015: #1 := RSP
00000019: RSP := RSP - 8
0000001c: CF := #1 < 8
0000001f: OF := high:1[(#1 ^ 8) & (#1 ^ RSP)]
00000022: AF := 0x10 = (0x10 & (RSP ^ #1 ^ 8))
00000025: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000028: SF := high:1[RSP]
0000002b: ZF := 0 = RSP
0000003a: #4 := RSP
0000003d: RSP := RSP + 8
00000040: CF := RSP < #4
00000043: OF := ~high:1[#4] & (high:1[#4] | high:1[RSP]) &
          ~(high:1[#4] & high:1[RSP])
00000046: AF := 0x10 = (0x10 & (RSP ^ #4 ^ 8))
00000049: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000004c: SF := high:1[RSP]
0000004f: ZF := 0 = RSP
00000059: #7 := mem[RSP, el]:u64
0000005c: RSP := RSP + 8
0000005f: call #7 with noreturn

000008bc: sub _init(_init_result)
000008d7: _init_result :: out u32 = RAX

0000009d:
000000a9: #10 := RSP
000000ac: RSP := RSP - 8
000000af: CF := #10 < 8
000000b2: OF := high:1[(#10 ^ 8) & (#10 ^ RSP)]
000000b5: AF := 0x10 = (0x10 & (RSP ^ #10 ^ 8))
000000b8: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000000bb: SF := high:1[RSP]
000000be: ZF := 0 = RSP
000000c6: RAX := mem[0x600FF8, el]:u64
000000d4: #13 := RAX
000000d7: OF := 0
000000da: CF := 0
000000dd: AF := unknown[bits]:u1
000000e0: PF :=
          ~low:1[let $1 = #13 >> 4 ^ #13 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000000e3: SF := high:1[#13]
000000e6: ZF := 0 = #13
000000f1: when ZF goto %000000eb
000008bd: goto %0000012c

0000012c:
00000134: RSP := RSP - 8
00000137: mem := mem with [RSP, el]:u64 <- 0x4003A5
0000013a: call @__gmon_start__ with return %000000eb

000000eb:
00000103: #15 := RSP
00000106: RSP := RSP + 8
00000109: CF := RSP < #15
0000010c: OF := ~high:1[#15] & (high:1[#15] | high:1[RSP]) &
          ~(high:1[#15] & high:1[RSP])
0000010f: AF := 0x10 = (0x10 & (RSP ^ #15 ^ 8))
00000112: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000115: SF := high:1[RSP]
00000118: ZF := 0 = RSP
00000122: #18 := mem[RSP, el]:u64
00000125: RSP := RSP + 8
00000128: call #18 with noreturn

000008be: sub _start(_start_result)
000008d8: _start_result :: out u32 = RAX

0000013d:
00000148: RBP := 0
0000014b: AF := unknown[bits]:u1
0000014e: ZF := 1
00000151: PF := 1
00000154: OF := 0
00000157: CF := 0
0000015a: SF := 0
00000162: R9 := RDX
0000016b: RSI := mem[RSP, el]:u64
0000016e: RSP := RSP + 8
00000176: RDX := RSP
00000184: RSP := RSP & 0xFFFFFFFFFFFFFFF0
00000187: OF := 0
0000018a: CF := 0
0000018d: AF := unknown[bits]:u1
00000190: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000193: SF := high:1[RSP]
00000196: ZF := 0 = RSP
000001a0: #20 := RAX
000001a3: RSP := RSP - 8
000001a6: mem := mem with [RSP, el]:u64 <- #20
000001b0: #21 := RSP
000001b3: RSP := RSP - 8
000001b6: mem := mem with [RSP, el]:u64 <- #21
000001be: R8 := 0x400570
000001c6: RCX := 0x400500
000001ce: RDI := 0x4004E1
000001d8: RSP := RSP - 8
000001db: mem := mem with [RSP, el]:u64 <- 0x400409
000001de: call @__libc_start_main with return %000001e1

000001e1:
000008bf: call @deregister_tm_clones with noreturn

000008c0: sub deregister_tm_clones(deregister_tm_clones_result)
000008d9: deregister_tm_clones_result :: out u32 = RAX

000001e9:
000001ee: RAX := 0x601037
000001f8: #22 := RBP
000001fb: RSP := RSP - 8
000001fe: mem := mem with [RSP, el]:u64 <- #22
0000020d: #23 := RAX
00000210: RAX := RAX - 0x601030
00000213: CF := #23 < 0x601030
00000216: OF := high:1[(#23 ^ 0x601030) & (#23 ^ RAX)]
00000219: AF := 0x10 = (0x10 & (RAX ^ #23 ^ 0x601030))
0000021c: PF :=
          ~low:1[let $1 = RAX >> 4 ^ RAX in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000021f: SF := high:1[RAX]
00000222: ZF := 0 = RAX
00000230: #26 := RAX - 0xE
00000233: CF := RAX < 0xE
00000236: OF := high:1[(RAX ^ 0xE) & (RAX ^ #26)]
00000239: AF := 0x10 = (0x10 & (#26 ^ RAX ^ 0xE))
0000023c: PF :=
          ~low:1[let $1 = #26 >> 4 ^ #26 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000023f: SF := high:1[#26]
00000242: ZF := 0 = #26
0000024a: RBP := RSP
00000255: when CF | ZF goto %0000024f
000008c1: goto %0000084b

0000084b:
00000850: RAX := 0
0000085e: #89 := RAX
00000861: OF := 0
00000864: CF := 0
00000867: AF := unknown[bits]:u1
0000086a: PF :=
          ~low:1[let $1 = #89 >> 4 ^ #89 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000086d: SF := high:1[#89]
00000870: ZF := 0 = #89
0000087a: when ZF goto %0000024f
000008c2: goto %00000881

0000024f:
00000261: RBP := mem[RSP, el]:u64
00000264: RSP := RSP + 8
0000026e: #28 := mem[RSP, el]:u64
00000271: RSP := RSP + 8
00000274: call #28 with noreturn

00000881:
00000887: RBP := mem[RSP, el]:u64
0000088a: RSP := RSP + 8
00000892: RDI := 0x601030
0000089a: call RAX with noreturn

000008c3: sub frame_dummy(frame_dummy_result)
000008da: frame_dummy_result :: out u32 = RAX

000003d2:
000003d7: RDI := 0x600E20
000003e5: #46 := mem[RDI, el]:u64
000003e8: CF := mem[RDI, el]:u64 < 0
000003eb: OF := high:1[mem[RDI, el]:u64 & (mem[RDI, el]:u64 ^ #46)]
000003ee: AF := 0x10 = (0x10 & (#46 ^ mem[RDI, el]:u64))
000003f1: PF :=
          ~low:1[let $1 = #46 >> 4 ^ #46 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000003f4: SF := high:1[#46]
000003f7: ZF := 0 = #46
00000402: when ~ZF goto %000003fc
000008c4: goto %00000432

000003fc:
0000040d: RAX := 0
0000041b: #48 := RAX
0000041e: OF := 0
00000421: CF := 0
00000424: AF := unknown[bits]:u1
00000427: PF :=
          ~low:1[let $1 = #48 >> 4 ^ #48 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000042a: SF := high:1[#48]
0000042d: ZF := 0 = #48
00000438: when ZF goto %00000432
000008c5: goto %0000044a

0000044a:
00000451: #50 := RBP
00000454: RSP := RSP - 8
00000457: mem := mem with [RSP, el]:u64 <- #50
0000045f: RBP := RSP
0000046a: #51 := RAX
0000046d: RSP := RSP - 8
00000470: mem := mem with [RSP, el]:u64 <- 0x4004D0
00000473: call #51 with return %00000477

00000477:
0000047d: RBP := mem[RSP, el]:u64
00000480: RSP := RSP + 8
00000488: call @register_tm_clones with noreturn

00000432:
00000443: call @register_tm_clones with noreturn

000008c6: sub g(g_result)
000008db: g_result :: out u32 = RAX

0000048b:
00000492: #52 := RBP
00000495: RSP := RSP - 8
00000498: mem := mem with [RSP, el]:u64 <- #52
000004a0: RBP := RSP
000004a8: RAX := 4
000004b1: RBP := mem[RSP, el]:u64
000004b4: RSP := RSP + 8
000004be: #53 := mem[RSP, el]:u64
000004c1: RSP := RSP + 8
000004c4: call #53 with noreturn

000008c7: sub main(main_argc, main_argv, main_result)
000008dc: main_argc :: in u32 = RDI
000008dd: main_argv :: in out u64 = RSI
000008de: main_result :: out u32 = RAX

000004c8:
000004cf: #54 := RBP
000004d2: RSP := RSP - 8
000004d5: mem := mem with [RSP, el]:u64 <- #54
000004dd: RBP := RSP
000004ec: #55 := RSP
000004ef: RSP := RSP - 8
000004f2: CF := #55 < 8
000004f5: OF := high:1[(#55 ^ 8) & (#55 ^ RSP)]
000004f8: AF := 0x10 = (0x10 & (RSP ^ #55 ^ 8))
000004fb: PF :=
          ~low:1[let $1 = RSP >> 4 ^ RSP in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000004fe: SF := high:1[RSP]
00000501: ZF := 0 = RSP
00000509: mem := mem with [RBP - 4, el]:u32 <- low:32[RDI]
00000511: RAX := 0
0000051b: RSP := RSP - 8
0000051e: mem := mem with [RSP, el]:u64 <- 0x4004F6
00000521: call @g with return %00000524

00000524:
0000052b: RSP := RBP
0000052e: RBP := mem[RSP, el]:u64
00000531: RSP := RSP + 8
0000053b: #58 := mem[RSP, el]:u64
0000053e: RSP := RSP + 8
00000541: call #58 with noreturn

000008c8: sub register_tm_clones(register_tm_clones_result)
000008df: register_tm_clones_result :: out u32 = RAX

00000280:
00000285: RSI := 0x601030
0000028f: #29 := RBP
00000292: RSP := RSP - 8
00000295: mem := mem with [RSP, el]:u64 <- #29
000002a4: #30 := RSI
000002a7: RSI := RSI - 0x601030
000002aa: CF := #30 < 0x601030
000002ad: OF := high:1[(#30 ^ 0x601030) & (#30 ^ RSI)]
000002b0: AF := 0x10 = (0x10 & (RSI ^ #30 ^ 0x601030))
000002b3: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000002b6: SF := high:1[RSI]
000002b9: ZF := 0 = RSI
000002c8: #33 := RSI
000002cb: RSI := RSI ~>> 3
000002ce: CF := high:1[#33 << 0x3D]
000002d1: SF := high:1[RSI]
000002d4: ZF := 0 = RSI
000002d7: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
000002da: AF := unknown[bits]:u1
000002dd: OF := unknown[bits]:u1
000002e5: RBP := RSP
000002ed: RAX := RSI
000002fc: #35 := RAX
000002ff: RAX := RAX >> 0x3F
00000302: CF := high:1[#35 << 1]
00000305: SF := high:1[RAX]
00000308: ZF := 0 = RAX
0000030b: PF :=
          ~low:1[let $1 = RAX >> 4 ^ RAX in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000030e: AF := unknown[bits]:u1
00000311: OF := unknown[bits]:u1
00000321: #37 := RSI
00000324: #38 := RAX
00000327: RSI := RSI + #38
0000032a: CF := RSI < #37
0000032d: OF := high:1[#37] = high:1[#38] & (high:1[#37] | high:1[RSI]) &
          ~(high:1[#37] & high:1[RSI])
00000330: AF := 0x10 = (0x10 & (RSI ^ #37 ^ #38))
00000333: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000336: SF := high:1[RSI]
00000339: ZF := 0 = RSI
00000348: #40 := RSI
0000034b: RSI := RSI ~>> 1
0000034e: CF := high:1[#40 << 0x3F]
00000351: SF := high:1[RSI]
00000354: ZF := 0 = RSI
00000357: PF :=
          ~low:1[let $1 = RSI >> 4 ^ RSI in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
0000035a: AF := unknown[bits]:u1
0000035d: OF := 0
00000368: when ZF goto %00000362
000008c9: goto %000007f4

000007f4:
000007f9: RAX := 0
00000807: #87 := RAX
0000080a: OF := 0
0000080d: CF := 0
00000810: AF := unknown[bits]:u1
00000813: PF :=
          ~low:1[let $1 = #87 >> 4 ^ #87 in
                 let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
00000816: SF := high:1[#87]
00000819: ZF := 0 = #87
00000823: when ZF goto %00000362
000008ca: goto %0000082a

00000362:
00000374: RBP := mem[RSP, el]:u64
00000377: RSP := RSP + 8
00000381: #42 := mem[RSP, el]:u64
00000384: RSP := RSP + 8
00000387: call #42 with noreturn

0000082a:
00000830: RBP := mem[RSP, el]:u64
00000833: RSP := RSP + 8
0000083b: RDI := 0x601030
00000843: call RAX with noreturn

000008a5: sub __gmon_start__@external(__gmon_start__@external_result)
000008e0: __gmon_start__@external_result :: out u32 = RAX

00000084: sub __libc_start_main@external(__libc_start_main@external_result)
000008e1: __libc_start_main@external_result :: out u32 = RAX
